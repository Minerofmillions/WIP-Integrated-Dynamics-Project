{
  "vars": {
    "bFalse": {
      "type": "Boolean",
      "value": "false"
    },
    "bTrue": {
      "type": "Boolean",
      "value": "true"
    },
    "s1": {
      "type": "String",
      "value": "1"
    },
    "i0": {
      "type": "Integer",
      "value": "0"
    },
    "i1": {
      "type": "Integer",
      "value": "1"
    },
    "i2": {
      "type": "Integer",
      "value": "2"
    },
    "i3": {
      "type": "Integer",
      "value": "3"
    },
    "i4": {
      "type": "Integer",
      "value": "4"
    },
    "oGeneralIdentity": {
      "type": "Operator",
      "value": "Operators.GENERALIDENTITY"
    },
    "oLogicalNot": {
      "type": "Operator",
      "value": "Operators.LOGICALNOT"
    },
    "oLogicalAnd": {
      "type": "Operator",
      "value": "Operators.LOGICALAN"
    },
    "oParseInt": {
      "type": "Operator",
      "value": "Operators.PARSEINTEGER"
    },
    "oRelationalEquals": {
      "type": "Operator",
      "value": "Operators.RELATIONALEQUALS"
    },
    "oRelationalGreaterThan": {
      "type": "Operator",
      "value": "Operators.RELATIONALGT"
    },
    "oRelationalLessThan": {
      "type": "Operator",
      "value": "Operators.RELATIONALLT"
    },
    "oArithmeticIncrement": {
      "type": "Operator",
      "value": "Operators.ARITHMETICINCREMENT"
    },
    "oArithmeticModulus": {
      "type": "Operator",
      "value": "Operators.ARITHMETICMODULUS"
    },
    "oArithmeticAddition": {
      "type": "Operator",
      "value": "Operators.ARITHMETICADDITION"
    },
    "oArithmeticMultiplication": {
      "type": "Operator",
      "value": "Operators.ARITHMETICMULTIPLICATION"
    },
    "oChoice": {
      "type": "Operator",
      "value": "Operators.GENERALCHOICE"
    },
    "oPipe": {
      "type": "Operator",
      "value": "Operators.OPERATORPIPE"
    },
    "oListLength": {
      "type": "Operator",
      "value": "Operators.LISTLENGTH"
    },
    "oListContains": {
      "type": "Operator",
      "value": "Operators.LISTCONTAINS"
    },
    "oOperatorMap": {
      "type": "Operator",
      "value": "Operators.OPERATORMAP"
    },
    "oSubStr": {
      "type": "Operator",
      "value": "Operators.STRINGSUBSTRING"
    },
    "oGetConstStr": {
      "type": "Operator",
      "value": "new OperatorBase(\"NONE\", \"NONE\", \"NONE\", \"NONE\", false, new IValueType[0], ValueTypes.STRING, variables -> ValueTypeString.ValueString.of(\"HI\"), null) {\n            @Override\n            protected String getUnlocalizedType() {\n                return \"NONE\";\n            }\n        }"
    },
    "lempty": {
      "type": "List",
      "listType": "Unknown",
      "values": []
    },
    "lintegers": {
      "type": "List",
      "listType": "Unknown",
      "values": []
    },
    "lbooleans": {
      "type": "List",
      "listType": "Unknown",
      "values": []
    },
    "sAnd": {
      "type": "String",
      "value": "integrateddynamics:logical_and"
    },
    "sOther": {
      "type": "String",
      "value": "integrateddynamics:other"
    }
  },
  "tests": {
    "OPERATOR_APPLY": {
      "testApply": [
        {
          "args": ["oGeneralIdentity", "bFalse"]
        },
        {
          "args": ["oGeneralIdentity", "bTrue"]
        },
        {
          "args": ["oLogicalNot", "bTrue"]
        },
        {
          "args": ["oLogicalNot", "bFalse"]
        }
      ],
      "testApplyCurring": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        },
        {
          "args": ["oLogicalAndCurriedTrue", "bTrue"]
        },
        {
          "args": ["oLogicalAndCurriedTrue", "bFalse"]
        },
        {
          "args": ["oLogicalAnd", "bFalse"]
        },
        {
          "args": ["oLogicalAndCurriedFalse", "bTrue"]
        },
        {
          "args": ["oLogicalAndCurriedFalse", "bFalse"]
        }
      ],
      "testInvalidInputSizeApplyLarge": [
        {
          "args": ["oGeneralIdentity", "bFalse", "bFalse"]
        }
      ],
      "testInvalidInputSizeApplyCurryingLarge": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        },
        {
          "args": ["curriedOperatorValue", "bFalse", "bFalse"]
        }
      ],
      "testInvalidInputSizeApplySmall": [
        {
          "args": ["oGeneralIdentity"]
        }
      ],
      "testInvalidInputSizeApplyCurringSmall": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        },
        {
          "args": ["curriedOperatorValue"]
        }
      ],
      "testInvalidOperatorTypeApply": [
        {
          "args": ["bFalse", "bFalse"]
        }
      ],
      "testInvalidOperatorInputTypeApply": [
        {
          "args": ["oLogicalNot", "oGeneralIdentity"]
        }
      ],
      "testInvalidOperatorInputTypeAnyApply": [
        {
          "args": ["i4Any", "i4Any"]
        }
      ],
      "testConditionalOutputTypesApplyCurring": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        }
      ],
      "testApply2OnOpWith3Inputs": [
        {
          "args": ["new IVariable[]{new Variable<>(res1"]
        }
      ],
      "testApply3ThreeAnd": [
        {
          "args": ["oPipeFlip", "oLogicalAnd"]
        }
      ],
      "testMap": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        }
      ],
      "testConditionalOutputTypesMap": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        }
      ],
      "testPredicateConjunction": [
        {
          "args": ["oRelationalLessThan", "i0"]
        },
        {
          "args": ["oRelationalGreaterThan", "i2"]
        },
        {
          "args": ["zeroLessThanandTwoGreaterThan", "i0"]
        },
        {
          "args": ["zeroLessThanandTwoGreaterThan", "i1"]
        },
        {
          "args": ["zeroLessThanandTwoGreaterThan", "i2"]
        }
      ],
      "testInvalidInputSizePredicateConjunctionLarge": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testInvalidInputSizePredicateConjunctionSmall": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testInvalidOperatorTypePredicateConjunction": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testInvalidOperatorInputTypePredicateConjunction": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testConditionalOutputTypesPredicateConjunction": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testPredicateDisjunction": [
        {
          "args": ["oRelationalLessThan", "i0"]
        },
        {
          "args": ["oRelationalGreaterThan", "i2"]
        },
        {
          "args": ["zeroLessThanorTwoGreaterThan", "i0"]
        },
        {
          "args": ["zeroLessThanorTwoGreaterThan", "i1"]
        },
        {
          "args": ["zeroLessThanorTwoGreaterThan", "i2"]
        }
      ],
      "testInvalidInputSizePredicateDisjunctionLarge": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testInvalidInputSizePredicateDisjunctionSmall": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testInvalidOperatorTypePredicateDisjunction": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testInvalidOperatorInputTypePredicateDisjunction": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testConditionalOutputTypesPredicateDisjunction": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testPredicateNegation": [
        {
          "args": ["oRelationalGreaterThan", "i2"]
        },
        {
          "args": ["notTwoGreaterThan", "i0"]
        },
        {
          "args": ["notTwoGreaterThan", "i1"]
        },
        {
          "args": ["notTwoGreaterThan", "i2"]
        },
        {
          "args": ["notTwoGreaterThan", "i3"]
        }
      ],
      "testInvalidInputSizePredicateNegationLarge": [
        {
          "args": ["oRelationalLessThan", "i0"]
        }
      ],
      "testConditionalOutputTypesPredicateNegation": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testPredicatePipe": [
        {
          "args": ["increment2", "i0"]
        },
        {
          "args": ["increment2", "i1"]
        }
      ],
      "testPredicatePipe3Incr": [
        {
          "args": ["op", "i2"]
        }
      ],
      "testPredicatePipeAddAddError": [
        {
          "args": ["op", "i2", "i2"]
        }
      ],
      "testPredicatePipe2": [
        {
          "args": ["addOneAndSelfMultiply", "i0"]
        },
        {
          "args": ["addOneAndSelfMultiply", "i1"]
        },
        {
          "args": ["addOneAndSelfMultiply", "i2"]
        },
        {
          "args": ["addOneAndSelfMultiply", "i3"]
        }
      ],
      "testPredicateFlip": [
        {
          "args": ["lessThanFlipped", "i2"]
        },
        {
          "args": ["lessThan2", "i0"]
        },
        {
          "args": ["lessThan2", "i1"]
        },
        {
          "args": ["lessThan2", "i2"]
        },
        {
          "args": ["lessThan2", "i3"]
        }
      ],
      "testPredicateFlipOperatorWithThreeInputs": [
        {
          "args": ["choiceFlipped", "i0"]
        },
        {
          "args": ["choiceFlipped0", "bFalse"]
        },
        {
          "args": ["choiceFlipped0", "bTrue"]
        },
        {
          "args": ["choiceFlipped0False", "i1"]
        },
        {
          "args": ["choiceFlipped0True", "i1"]
        }
      ],
      "testFilter": [
        {
          "args": ["oRelationalEquals", "i2"]
        },
        {
          "args": ["oRelationalLessThan", "i0"]
        },
        {
          "args": ["oRelationalGreaterThan", "i2"]
        },
        {
          "args": ["modulusFlipped", "i2"]
        },
        {
          "args": ["oRelationalEquals", "i0"]
        }
      ],
      "testInvalidInputSizeFilterLarge": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testInvalidInputSizeFilterSmall": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testInvalidOperatorInputTypeFilter": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testConditionalOutputTypesFilter": [
        {
          "args": ["oRelationalEquals", "i2"]
        }
      ],
      "testReduce1Complex": [
        {
          "args": [
            "new DummyVariableOperator(ValueTypeOperator.ValueOperator.of(Operators.OPERATOR_PIPE2"
          ]
        }
      ]
    },
    "OPERATOR_APPLY_2": {
      "testApply2": [
        {
          "args": ["oLogicalAnd", "bTrue", "bFalse"]
        },
        {
          "args": ["oLogicalAnd", "bTrue", "bTrue"]
        },
        {
          "args": ["oRelationalGreaterThan", "i0", "i1"]
        },
        {
          "args": ["oRelationalGreaterThan", "i2", "i1"]
        }
      ],
      "testApply2OnOpWith3Inputs": [
        {
          "args": ["oChoice", "bTrue", "i1"]
        }
      ],
      "testInvalidInputSizeApply2Large": [
        {
          "args": ["oLogicalAnd", "bFalse", "bFalse", "bFalse"]
        }
      ],
      "testInvalidInputSizeApply2Small": [
        {
          "args": ["oLogicalAnd", "bTrue"]
        }
      ],
      "testInvalidOperatorTypeApply2": [
        {
          "args": ["bFalse", "bFalse", "bFalse"]
        }
      ],
      "testInvalidOperatorInputTypeApply2": [
        {
          "args": ["oLogicalNot", "oGeneralIdentity", "bTrue"]
        }
      ],
      "testApply3ThreeAnd": [
        {
          "args": ["oPipeFlip", "oThreeAnd_1", "oLogicalAnd"]
        }
      ],
      "testPredicatePipeLargeInputCount": [
        {
          "args": ["incrementAndAdd", "s1", "i2"]
        }
      ],
      "testPredicatePipeMixed": [
        {
          "args": ["listLengthIncr", "lintegers", "i2"]
        }
      ],
      "testPredicatePipeLenAddMap": [
        {
          "args": ["op", "lintegers", "lintegers"]
        }
      ],
      "testPredicatePipeMapContains": [
        {
          "args": ["mapContains", "lintegers", "lintegers"]
        }
      ]
    },
    "OPERATOR_APPLY_3": {
      "testApply3": [
        {
          "args": ["oSubStr", "i0", "i1", "sAnd"]
        }
      ],
      "testApply3ThreeAnd": [
        {
          "args": ["oThreeAnd", "bTrue", "bTrue", "bTrue"]
        }
      ]
    },
    "OPERATOR_FLIP": {
      "testApply3ThreeAnd": [
        {
          "args": ["oPipe"]
        }
      ],
      "testPredicateFlip": [
        {
          "args": ["oRelationalLessThan"]
        }
      ],
      "testPredicateFlipOperatorWithThreeInputs": [
        {
          "args": ["oChoice"]
        }
      ],
      "testInvalidInputSizePredicateFlipLarge": [
        {
          "args": ["oRelationalLessThan", "oRelationalLessThan"]
        }
      ],
      "testInvalidInputSizePredicateFlipSmall": [
        {
          "args": []
        }
      ],
      "testInvalidOperatorTypePredicateFlip": [
        {
          "args": ["bFalse"]
        }
      ],
      "testConditionalOutputTypesPredicateFlip": [
        {
          "args": ["oRelationalLessThan"]
        }
      ],
      "testFilter": [
        {
          "args": ["oArithmeticModulus"]
        }
      ],
      "testReduce1Complex": [
        {
          "args": [
            "new DummyVariableOperator(ValueTypeOperator.ValueOperator.of(Operators.GENERAL_CHOICE"
          ]
        }
      ]
    },
    "OPERATOR_APPLY_N": {
      "testApplyN": [
        {
          "args": ["oSubStr", "applyArgs"]
        }
      ]
    },
    "OPERATOR_APPLY_0": {
      "testApply0": [
        {
          "args": ["oGetConstStr"]
        }
      ]
    },
    "OPERATOR_MAP": {
      "testMap": [
        {
          "args": ["oArithmeticIncrement", "lintegers"]
        },
        {
          "args": ["oLogicalNot", "lbooleans"]
        },
        {
          "args": ["curriedOperatorValue", "lbooleans"]
        },
        {
          "args": ["oLogicalAnd", "lbooleans"]
        }
      ],
      "testInvalidInputSizeMapLarge": [
        {
          "args": ["oArithmeticIncrement", "lintegers", "lintegers"]
        }
      ],
      "testInvalidInputSizeMapSmall": [
        {
          "args": ["oArithmeticIncrement"]
        }
      ],
      "testInvalidOperatorTypeMap": [
        {
          "args": ["bFalse", "bFalse"]
        }
      ],
      "testInvalidOperatorInputTypeMap": [
        {
          "args": ["oArithmeticIncrement", "oArithmeticIncrement"]
        }
      ]
    },
    "OPERATOR_CONJUNCTION": {
      "testPredicateConjunction": [
        {
          "args": ["zeroLessThan", "twoGreaterThan"]
        }
      ],
      "testInvalidInputSizePredicateConjunctionLarge": [
        {
          "args": ["zeroLessThan", "zeroLessThan", "zeroLessThan"]
        }
      ],
      "testInvalidInputSizePredicateConjunctionSmall": [
        {
          "args": ["zeroLessThan"]
        }
      ],
      "testInvalidOperatorTypePredicateConjunction": [
        {
          "args": ["bFalse", "zeroLessThan"]
        }
      ],
      "testInvalidOperatorInputTypePredicateConjunction": [
        {
          "args": ["equalsTwo", "i0"]
        }
      ],
      "testFilter": [
        {
          "args": ["zeroLessThan", "twoGreaterThan"]
        }
      ]
    },
    "OPERATOR_DISJUNCTION": {
      "testPredicateDisjunction": [
        {
          "args": ["zeroLessThan", "twoGreaterThan"]
        }
      ],
      "testInvalidInputSizePredicateDisjunctionLarge": [
        {
          "args": ["zeroLessThan", "zeroLessThan", "zeroLessThan"]
        }
      ],
      "testInvalidInputSizePredicateDisjunctionSmall": [
        {
          "args": ["zeroLessThan"]
        }
      ],
      "testInvalidOperatorTypePredicateDisjunction": [
        {
          "args": ["bFalse", "zeroLessThan"]
        }
      ],
      "testInvalidOperatorInputTypePredicateDisjunction": [
        {
          "args": ["equalsTwo", "i0"]
        }
      ],
      "testFilter": [
        {
          "args": ["isZero", "isEvenUnsafe"]
        }
      ]
    },
    "OPERATOR_NEGATION": {
      "testPredicateNegation": [
        {
          "args": ["twoGreaterThan"]
        }
      ],
      "testInvalidInputSizePredicateNegationLarge": [
        {
          "args": ["zeroLessThan", "zeroLessThan"]
        }
      ],
      "testInvalidInputSizePredicateNegationSmall": [
        {
          "args": []
        }
      ],
      "testInvalidOperatorTypePredicateNegation": [
        {
          "args": ["bFalse"]
        }
      ]
    },
    "OPERATOR_PIPE": {
      "testPredicatePipe": [
        {
          "args": ["oArithmeticIncrement", "oArithmeticIncrement"]
        }
      ],
      "testPredicatePipeLargeInputCount": [
        {
          "args": ["oParseInt", "oArithmeticAddition"]
        }
      ],
      "testPredicatePipeMixed": [
        {
          "args": ["oListLength", "oArithmeticAddition"]
        }
      ],
      "testPredicatePipeLenAddMap": [
        {
          "args": [
            "new IVariable[]{oListLength, new DummyVariableOperator((ValueTypeOperator.ValueOperator"
          ]
        },
        {
          "args": ["oArithmeticAddition", "oOperatorMap"]
        }
      ],
      "testPredicatePipe3Incr": [
        {
          "args": [
            "new IVariable[]{oArithmeticIncrement, new DummyVariableOperator((ValueTypeOperator.ValueOperator"
          ]
        },
        {
          "args": ["oArithmeticIncrement", "oArithmeticIncrement"]
        }
      ],
      "testPredicatePipeAddAddError": [
        {
          "args": ["oArithmeticAddition", "oArithmeticAddition"]
        }
      ],
      "testPredicatePipeMapContains": [
        {
          "args": ["oListContains", "oOperatorMap"]
        }
      ],
      "testInvalidInputSizePredicatePipeLarge": [
        {
          "args": [
            "oArithmeticIncrement",
            "oArithmeticIncrement",
            "oArithmeticIncrement"
          ]
        }
      ],
      "testInvalidInputSizePredicatePipeSmall": [
        {
          "args": ["oArithmeticIncrement"]
        }
      ],
      "testInvalidOperatorTypePredicatePipe": [
        {
          "args": ["bFalse", "oArithmeticIncrement"]
        }
      ],
      "testInvalidOperatorInputTypePredicatePipe": [
        {
          "args": ["oArithmeticIncrement", "i0"]
        }
      ],
      "testFilter": [
        {
          "args": ["modulus2", "isZero"]
        }
      ],
      "testReduce1Complex": [
        {
          "args": ["new DummyVariableOperator((ValueTypeOperator.ValueOperator"]
        }
      ]
    },
    "OPERATOR_PIPE2": {
      "testPredicatePipe2": [
        {
          "args": [
            "oGeneralIdentity",
            "oArithmeticIncrement",
            "oArithmeticMultiplication"
          ]
        }
      ],
      "testReduce1Complex": [
        {
          "args": [
            "new DummyVariableOperator(ValueTypeOperator.ValueOperator.of(Operators.RELATIONAL_GT"
          ]
        }
      ]
    },
    "OPERATOR_FILTER": {
      "testFilter": [
        {
          "args": ["equalsTwo", "lintegers"]
        },
        {
          "args": ["zeroLessThanandTwoGreaterThan", "lintegers"]
        },
        {
          "args": ["isEven", "lintegers"]
        }
      ],
      "testInvalidInputSizeFilterLarge": [
        {
          "args": ["equalsTwo", "lintegers", "lintegers"]
        }
      ],
      "testInvalidInputSizeFilterSmall": [
        {
          "args": ["equalsTwo"]
        }
      ],
      "testInvalidOperatorTypeFilter": [
        {
          "args": ["bFalse", "lintegers"]
        }
      ],
      "testInvalidOperatorInputTypeFilter": [
        {
          "args": ["equalsTwo", "oArithmeticIncrement"]
        }
      ]
    },
    "OPERATOR_REDUCE": {
      "testReduce": [
        {
          "args": ["oArithmeticAddition", "lintegers", "i0"]
        }
      ],
      "testInvalidInputSizeReduceLarge": [
        {
          "args": ["oArithmeticAddition", "lintegers", "i0", "i0"]
        }
      ],
      "testInvalidInputSizeReduceSmall": [
        {
          "args": ["oArithmeticAddition", "lintegers"]
        }
      ],
      "testInvalidOperatorTypeReduce": [
        {
          "args": ["bFalse", "lintegers", "i0"]
        }
      ],
      "testInvalidOperatorInputTypeReduce": [
        {
          "args": ["oArithmeticAddition", "i0", "i0"]
        }
      ],
      "testInvalidOperatorAccumulatorTypeReduce": [
        {
          "args": ["oArithmeticAddition", "lintegers", "lintegers"]
        }
      ]
    },
    "OPERATOR_REDUCE1": {
      "testReduce1": [
        {
          "args": ["oArithmeticAddition", "lintegers"]
        }
      ],
      "testReduce1Complex": [
        {
          "args": ["reducer", "lintegers"]
        }
      ],
      "testInvalidInputSizeReduce1Large": [
        {
          "args": ["oArithmeticAddition", "lintegers", "i0"]
        }
      ],
      "testInvalidInputSizeReduce1Small": [
        {
          "args": ["oArithmeticAddition"]
        }
      ],
      "testInvalidOperatorTypeReduce1": [
        {
          "args": ["bFalse", "lintegers"]
        }
      ],
      "testInvalidOperatorInputTypeReduce1": [
        {
          "args": ["oArithmeticAddition", "i0"]
        }
      ],
      "testInvalidEmptyListReduce1": [
        {
          "args": ["oArithmeticAddition", "lempty"]
        }
      ]
    },
    "OPERATOR_BY_NAME": {
      "testByName": [
        {
          "args": ["sAnd"]
        }
      ],
      "testByNameNonExisting": [
        {
          "args": ["sOther"]
        }
      ],
      "testInvalidInputSizeByNameLarge": [
        {
          "args": ["sAnd", "sAnd"]
        }
      ],
      "testInvalidInputSizeByNameSmall": [
        {
          "args": []
        }
      ],
      "testInvalidOperatorInputTypeByName": [
        {
          "args": ["oArithmeticIncrement"]
        }
      ]
    }
  }
}
